library(ggplot2)
library(cowplot)
library(beyonce)
library(ggeffects)
getwd()
load(file = "../data/KI_CoralCoverData.RData")
load(file = "../data/KI_CoralCoverData_LH.RData")
## Clean the data
source("../analyses/KI_coral_cover_clean.R")
theme_set(theme_bw() + theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text = element_text(size = 16, color = "black"),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 18, margin = margin(20,0,0,0)),
plot.title = element_text(size = 22, margin = margin(0,0,15,0)),
plot.margin = margin(10,10,10,20),
strip.background = element_rect(fill = "black"),
strip.text = element_text(colour = "white", size = 12),
panel.border = element_rect(color = "black", fill = NA, size = 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
model1 <- glmmTMB(mean.cover ~ local_dist_z + poly(npp_max_z, 2) + mmm_temp_z + exposure,
data = p.cover.b.avg, family = beta_family(link = "logit"))
# Output model coefficients
model1.coef <- data.frame(confint(model1, full = TRUE))
names(model1.coef)[names(model1.coef) == "X2.5.."] <- "LowerCI"
names(model1.coef)[names(model1.coef) == "X97.5.."] <- "UpperCI"
# Rename coefficients
model1.coef <- model1.coef[-c(1,7), ]
rownames(model1.coef)[1] <- "Dist."
rownames(model1.coef)[2] <- "NPP (l)"
rownames(model1.coef)[3] <- "NPP (q)"
rownames(model1.coef)[4] <- "Temp."
rownames(model1.coef)[5] <- "Expo."
model1.coef$Variable <- rownames(model1.coef)
model1.coef$Variable <- as.factor(model1.coef$Variable)
# Reorder variables
model1.coef <- model1.coef[c(5,4,3,2,1), ]
# Create plot
fig1b <- ggplot(model1.coef, aes(x = fct_inorder(Variable), y = Estimate)) + geom_hline(yintercept = 0,
color = gray(1/2), lty = 2)
fig1b <- fig1b + geom_pointrange(aes(x = fct_inorder(Variable), y = Estimate, ymin = LowerCI, ymax = UpperCI),
position = position_dodge(width = 1/2), shape = 21, fatten = 4, size = 1, fill = "black")
fig1b <- fig1b + coord_flip() + theme_cowplot() + xlab("") +  theme(axis.text = element_text(size = 18, color = "black"),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 20,
margin = margin(20,0,0,0)))
fig1b
model2 <- glmmTMB(mean.cover ~ Heat * local_dist_z + dhw_max_z + poly(npp_max_z, 2) + (1|Site),
data = p.cover.ba.avg, family = beta_family(link = "logit"))
# Output model predictions
pred.2 <- ggpredict(model2, c("local_dist_z [all]", "Heat"))
names(pred.2)[names(pred.2) == "group"] <- "Heat"
# Set colour palette for plot
col.2 <- c("#654A89", "#C2B0D3")
# Create plot with predicted and observed values
fig3b <- ggplot() +
geom_line(data = pred.2, aes(x = x, y = predicted*100, color = Heat), size = 1) +
geom_ribbon(data = pred.2, aes(x = x, y = predicted*100, ymin = conf.low*100, ymax = conf.high*100, fill = Heat), alpha = 0.4) +
xlab("Human Disturbance") + ylab("Percent Hard Coral Cover") +
scale_fill_manual("Heat", values = col.2) +
scale_color_manual("Heat", values = col.2) +
theme_classic() + theme(legend.position = c(0.83, 0.89)) +
annotate(geom = "text", x = 1.195, y = 49, label = "italic(P)<0.001", parse = TRUE, color = "black", size = 7) +
theme(axis.title = element_text(size = 25), axis.text = element_text(size = 20, color = "black"),
legend.text = element_text(size = 20), legend.title = element_text(size = 20))
fig3b <- fig3b + geom_point(data = p.cover.ba.avg, aes(x = local_dist_z, y = mean.cover*100, colour = Heat, fill = Heat),
shape = 21, cex = 5, alpha = 0.7)
fig3b
model2c <- glmmTMB(mean.cover ~ Heat * local_dist_z + poly(dhw_max_z, 2) + npp_max_z + (1|Site),
data = p.cover.comp.avg, ziformula = ~Heat, family = beta_family(link = "logit"))
model2s <- glmmTMB(mean.cover ~ Heat * local_dist_z + dhw_max_z + (1|Site),
data = p.cover.st.avg, family = beta_family(link = "logit"))
# Output model predictions
pred.2c <- ggpredict(model2c, c("local_dist_z [all]", "Heat"))
pred.2s <- ggpredict(model2s, c("local_dist_z [all]", "Heat"))
# Add columns for life history type
pred.2c$lh.type <- "Competitive"
pred.2s$lh.type <- "Stress-tolerant"
# Combine predictions into a single dataframe
pred.2cs <- rbind(pred.2c, pred.2s)
pred.2cs$heat.lh <- paste(pred.2cs$group, pred.2cs$lh.type, sep = ".")
# Set colour palette for plot
lhcolors <- beyonce_palette(60)
col.2cs <- lhcolors[c(1,9)]
col.2cs2 <- lhcolors[c(1,9,1,9)]
line.2cs <- c("solid", "dotted")
# Create plot with predicted values
fig3c <- ggplot(pred.2cs, aes(x = x, y = predicted*100, ymin = conf.low*100, ymax = conf.high*100)) +
geom_line(aes(linetype = group, color = lh.type), size = 1) +
geom_ribbon(aes(fill = heat.lh, color = NA), alpha = 0.3) +
xlab("Human Disturbance") + ylab("Percent Hard Coral Cover") +
scale_linetype_manual("Heat", values = line.2cs) +
scale_color_manual("Life history", labels = c("Comp.", "Stress"), values = col.2cs) +
scale_fill_manual("Life history", values = col.2cs2) +
theme_classic() + guides(color = guide_legend(), fill = "none") +
theme(legend.position = c(0.85, 0.75)) +
annotate(geom = "text", x = 1.12, y = 18.5, label = "Comp: italic(P)<0.001", parse = TRUE, color = "black", size = 7) +
annotate(geom = "text", x = 1.115, y = 16, label = expression(paste("Stress: ", italic('P'), " = 0.011")),
parse = TRUE, color = "black", size = 7) +
theme(axis.title = element_text(size = 25), axis.text = element_text(size = 20, color = "black"),
legend.text = element_text(size = 20), legend.title = element_text(size = 20))
fig3c
model3 <- glmmTMB(mean.cover ~ Heat * life.hist + dhw_max_z + poly(npp_max_z, 2) + (1|Site),
data = p.cover.ba.avg, family = beta_family(link = "logit"))
# Output predicted values
pred.3 <- ggpredict(model3, c("life.hist [all]", "Heat"))
names(pred.3)[names(pred.3) == "group"] <- "Heat"
# Create plot with predicted and observed values
figs8 <- ggplot(pred.3, aes(x = x, y = predicted*100)) +
geom_point(data = p.cover.ba.avg, aes(x = life.hist, y = mean.cover*100, color = Heat, fill = Heat),
shape = 21, alpha = 0.6, cex = 3,
position = position_jitterdodge(dodge.width = 0.5)) +
geom_errorbar(aes(ymin = conf.low*100, ymax = conf.high*100, group = Heat),
width = 0, size = 0.7, position = position_dodge(0.5)) +
geom_point(aes(fill = Heat), shape = 21, cex = 6, position = position_dodge(0.5)) +
xlab("Life History") + ylab("Percent Hard Coral Cover") +
scale_fill_manual("Heat", values = col.2) + scale_color_manual("Heat", values = col.2) +
scale_x_discrete(labels = c("Stress-tolerant", "Mixed", "Competitive")) +
theme_classic() +
theme(axis.title = element_text(size = 22), axis.text = element_text(size = 18, color = "black"),
legend.text = element_text(size = 18), legend.title = element_text(size = 18))
figs8
library(dplyr)
library(arm)
library(glmmTMB)
library(MuMIn)
library(performance)
library(DHARMa)
library(here)
library(forcats)
library(ggplot2)
library(cowplot)
library(beyonce)
library(ggeffects)
## Load the data
load(file = "../data/KI_CoralCoverData.RData")
load(file = "../data/KI_CoralCoverData_LH.RData")
## Clean the data
source("../analyses/KI_coral_cover_clean.R")
theme_set(theme_bw() + theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text = element_text(size = 16, color = "black"),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 18, margin = margin(20,0,0,0)),
plot.title = element_text(size = 22, margin = margin(0,0,15,0)),
plot.margin = margin(10,10,10,20),
strip.background = element_rect(fill = "black"),
strip.text = element_text(colour = "white", size = 12),
panel.border = element_rect(color = "black", fill = NA, size = 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
# Set colour palette for plot
col.2 <- c("#654A89", "#C2B0D3")
model3 <- glmmTMB(mean.cover ~ Heat * life.hist + dhw_max_z + poly(npp_max_z, 2) + (1|Site),
data = p.cover.ba.avg, family = beta_family(link = "logit"))
# Output predicted values
pred.3 <- ggpredict(model3, c("life.hist [all]", "Heat"))
names(pred.3)[names(pred.3) == "group"] <- "Heat"
# Create plot with predicted and observed values
figs8 <- ggplot(pred.3, aes(x = x, y = predicted*100)) +
geom_point(data = p.cover.ba.avg, aes(x = life.hist, y = mean.cover*100, color = Heat, fill = Heat),
shape = 21, alpha = 0.6, cex = 3,
position = position_jitterdodge(dodge.width = 0.5)) +
geom_errorbar(aes(ymin = conf.low*100, ymax = conf.high*100, group = Heat),
width = 0, size = 0.7, position = position_dodge(0.5)) +
geom_point(aes(fill = Heat), shape = 21, cex = 6, position = position_dodge(0.5)) +
xlab("Life History") + ylab("Percent Hard Coral Cover") +
scale_fill_manual("Heat", values = col.2) + scale_color_manual("Heat", values = col.2) +
scale_x_discrete(labels = c("Stress-tolerant", "Mixed", "Competitive")) +
theme_classic() +
theme(axis.title = element_text(size = 22), axis.text = element_text(size = 18, color = "black"),
legend.text = element_text(size = 18), legend.title = element_text(size = 18))
figs8
library(dplyr)
library(arm)
library(glmmTMB)
library(MuMIn)
library(performance)
library(DHARMa)
library(here)
library(Rmisc)
library(reshape2)
library(emmeans)
## Load the data
load(file = "../data/KI_CoralCoverData.RData")
load(file = "../data/KI_CoralCoverData_LH.RData")
## Clean the data
source("../analyses/KI_coral_cover_clean.R")
View(p.cover.ba.avg)
View(p.cover.comp.avg)
View(p.cover.comp)
model1 <- glmmTMB(mean.cover ~ local_dist_z + poly(npp_max_z, 2) + mmm_temp_z + exposure,
data = p.cover.b.avg, family = beta_family(link = "logit"))
summary(model1)
# Assess model performance
model_performance(model1)
model2 <- glmmTMB(mean.cover ~ Heat * local_dist_z + dhw_max_z + poly(npp_max_z, 2) + (1|Site),
data = p.cover.ba.avg, family = beta_family(link = "logit"))
summary(model2)
# Assess model performance
model_performance(model2)
model2c <- glmmTMB(mean.cover ~ Heat * local_dist_z + poly(dhw_max_z, 2) + npp_max_z + (1|Site),
data = p.cover.comp.avg, ziformula = ~Heat, family = beta_family(link = "logit"))
summary(model2c)
# Assess model performance
model_performance(model2c)
model2s <- glmmTMB(mean.cover ~ Heat * local_dist_z + dhw_max_z + (1|Site),
data = p.cover.st.avg, family = beta_family(link = "logit"))
summary(model2s)
# Assess model performance
model_performance(model2s)
model3 <- glmmTMB(mean.cover ~ Heat * life.hist + dhw_max_z + poly(npp_max_z, 2) + (1|Site),
data = p.cover.ba.avg, family = beta_family(link = "logit"))
summary(model3)
# Assess model performance
model_performance(model3)
model_performance(model1)
check_model(model1, check = c("pp_check", "vif"))
# Calculate and plot scaled residuals vs. fitted values
model1.resid <- simulateResiduals(fittedModel = model1)
plot(model1.resid)
# Plot residuals against predictor variables
plotResiduals(model1.resid, p.cover.b.avg$local_dist_z)
plotResiduals(model1.resid, p.cover.b.avg$npp_max_z)
plotResiduals(model1.resid, p.cover.b.avg$mmm_temp_z)
plotResiduals(model1.resid, p.cover.b.avg$exposure)
check_model(model2, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2.resid <- simulateResiduals(fittedModel = model2)
plot(model2.resid)
# Plot residuals against predictor values
plotResiduals(model2.resid, p.cover.ba.avg$Heat)
plotResiduals(model2.resid, p.cover.ba.avg$local_dist_z)
plotResiduals(model2.resid, p.cover.ba.avg$dhw_max_z)
plotResiduals(model2.resid, p.cover.ba.avg$npp_max_z)
check_model(model2c, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2c.resid <- simulateResiduals(fittedModel = model2c)
plot(model2c.resid)
# Plot residuals against predictor values
plotResiduals(model2c.resid, p.cover.comp.avg$Heat)
plotResiduals(model2c.resid, p.cover.comp.avg$local_dist_z)
plotResiduals(model2c.resid, p.cover.comp.avg$dhw_max_z)
plotResiduals(model2c.resid, p.cover.comp.avg$npp_max_z)
check_model(model2s, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2s.resid <- simulateResiduals(fittedModel = model2s)
plot(model2s.resid)
# Plot residuals against predictor values
plotResiduals(model2s.resid, p.cover.st.avg$Heat)
plotResiduals(model2s.resid, p.cover.st.avg$local_dist_z)
plotResiduals(model2s.resid, p.cover.st.avg$dhw_max_z)
check_model(model3, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model3.resid <- simulateResiduals(fittedModel = model3)
plot(model3.resid)
# Plot residuals against predictor values
plotResiduals(model3.resid, p.cover.ba.avg$Heat)
plotResiduals(model3.resid, p.cover.ba.avg$life.hist)
plotResiduals(model3.resid, p.cover.ba.avg$dhw_max_z)
plotResiduals(model3.resid, p.cover.ba.avg$npp_max_z)
model2.pred <- predict(model2, p.cover.ba.avg, type = c("response"))
# Create new data frame with coral cover data and model predictions
p.cover.ba.avg.pred <- cbind(p.cover.ba.avg, model2.pred)
colnames(p.cover.ba.avg.pred)[15] <- "model2.pred"
# Subset the data (eliminate unnecessary variables, select 'very low' and 'very high' disturbance sites)
p.cover.ba.avg.pred.sub <- subset(p.cover.ba.avg.pred,
select = c("f.pressure", "Site", "Heat", "local_dist_z", "model2.pred"))
p.cover.ba.avg.pred.sub <- p.cover.ba.avg.pred.sub[(p.cover.ba.avg.pred.sub$f.pressure == "Very low" |
p.cover.ba.avg.pred.sub$f.pressure == "Very high"), ]
p.cover.ba.avg.pred.sub <- droplevels(p.cover.ba.avg.pred.sub)
# Calculate mean coral cover values
summarySE(p.cover.ba.avg.pred.sub, measurevar = "model2.pred", groupvars = c("f.pressure", "Heat"))
##################
## PERCENT CHANGE
## Calculate percent change from model predictions
# Average across expeditions within each heatwave period
pchange.model2 <- summarySE(p.cover.ba.avg.pred.sub, measurevar = "model2.pred",
groupvars = c("f.pressure", "Site", "Heat", "local_dist_z"))
# Widen data
pchange.model2.w <- dcast(pchange.model2, f.pressure + Site + local_dist_z ~ Heat,
value.var = "model2.pred", FUN = sum, fill = NA)
# Create a column for percent change and calculate as [(% substrate cover AFTER)-(% substrate cover BEFORE)]/(% substrate cover BEFORE)*100
pchange.model2.w$percent.change <- ((pchange.model2.w$After-pchange.model2.w$Before)/pchange.model2.w$Before)*100
# Remove site 5 (only sampled in the 'after' timepoint, so percent change is NA)
pchange.model2.w <- pchange.model2.w[!pchange.model2.w$Site == "site5", ]
# Calculate percent change
pchange.model2.mean <- summarySE(pchange.model2.w, measurevar = "percent.change", groupvars = "f.pressure")
pchange.model2.mean
# Test for significant difference in percent change for 'very low' and 'very high' sites
t.test(percent.change ~ f.pressure, pchange.model2.w)
# Calculate slope of the relationship between coral cover and disturbance for 'before' and 'after' categories
emtrends(model2, ~Heat, var = "local_dist_z")
model2c.pred <- predict(model2cr.avg, p.cover.comp.avg, type = c("response"))
# Create new data frame with coral cover data and model predictions
p.cover.comp.avg.pred <- cbind(p.cover.comp.avg, model2c.pred)
colnames(p.cover.comp.avg.pred)[14] <- "model2c.pred"
# Subset the data (eliminate unnecessary variables)
p.cover.comp.avg.pred.sub <- subset(p.cover.comp.avg.pred,
select = c("Site", "f.pressure", "Heat", "local_dist_z", "model2c.pred"))
# Calculate mean coral cover values
model2c.sitemean <- summarySE(p.cover.comp.avg.pred.sub, measurevar = "model2c.pred",
groupvars =  c("Heat", "f.pressure"))
summarySE(model2c.sitemean, measurevar = "model2c.pred", groupvars =  "Heat")
model2c.pred <- predict(model2c, p.cover.comp.avg, type = c("response"))
# Create new data frame with coral cover data and model predictions
p.cover.comp.avg.pred <- cbind(p.cover.comp.avg, model2c.pred)
colnames(p.cover.comp.avg.pred)[14] <- "model2c.pred"
# Subset the data (eliminate unnecessary variables)
p.cover.comp.avg.pred.sub <- subset(p.cover.comp.avg.pred,
select = c("Site", "f.pressure", "Heat", "local_dist_z", "model2c.pred"))
# Calculate mean coral cover values
model2c.sitemean <- summarySE(p.cover.comp.avg.pred.sub, measurevar = "model2c.pred",
groupvars =  c("Heat", "f.pressure"))
summarySE(model2c.sitemean, measurevar = "model2c.pred", groupvars =  "Heat")
pchange.model2c <- summarySE(p.cover.comp.avg.pred.sub, measurevar = "model2c.pred",
groupvars = c("f.pressure", "Site", "Heat", "local_dist_z"))
# Widen data
pchange.model2c.w <- dcast(pchange.model2c, f.pressure + Site + local_dist_z ~ Heat,
value.var = "model2c.pred", FUN = sum, fill = NA)
# Create a column for percent change and calculate as [(% substrate cover AFTER)-(% substrate cover BEFORE)]/(% substrate cover BEFORE)*100
pchange.model2c.w$percent.change <- ((pchange.model2c.w$After - pchange.model2c.w$Before)/pchange.model2c.w$Before)*100
# Remove site 5 (only sampled in the 'after' timepoint, so percent change is NA)
pchange.model2c.w <- pchange.model2c.w[!pchange.model2c.w$Site == "site5", ]
# Calculate percent change
pchange.model2c.mean <- summarySE(pchange.model2c.w, measurevar = "percent.change")
pchange.model2c.mean
model2s.pred <- predict(model2s, p.cover.st.avg, type = c("response"))
# Create new data frame with coral cover data and model predictions
p.cover.st.avg.pred <- cbind(p.cover.st.avg, model2s.pred)
colnames(p.cover.st.avg.pred)[14] <- "model2s.pred"
# Subset the data
p.cover.st.avg.pred.sub <- subset(p.cover.st.avg.pred,
select = c("f.pressure", "Site", "Heat", "local_dist_z", "model2s.pred"))
# Calculate mean coral cover values
model2s.sitemean <- summarySE(p.cover.st.avg.pred.sub, measurevar = "model2s.pred",
groupvars =  c("Heat", "f.pressure"))
summarySE(model2s.sitemean, measurevar = "model2s.pred", groupvars =  "Heat")
pchange.model2s <- summarySE(p.cover.st.avg.pred.sub, measurevar = "model2s.pred",
groupvars = c("f.pressure", "Site", "Heat", "local_dist_z"))
# Widen data
pchange.model2s.w <- dcast(pchange.model2s, f.pressure + Site + local_dist_z ~ Heat,
value.var = "model2s.pred", FUN = sum, fill = NA)
# Create a column for percent change and calculate as [(% substrate cover AFTER)-(% substrate cover BEFORE)]/(% substrate cover BEFORE)*100
pchange.model2s.w$percent.change <- ((pchange.model2s.w$After - pchange.model2s.w$Before)/pchange.model2s.w$Before)*100
# Remove site 5 (only sampled in the 'after' timepoint, so percent change is NA)
pchange.model2s.w <- pchange.model2s.w[!pchange.model2s.w$Site == "site5", ]
# Calculate percent change
pchange.model2s.mean <- summarySE(pchange.model2s.w, measurevar = "percent.change")
pchange.model2s.mean
pchange.model2c.w <- pchange.model2c.w[,-c(4,5)]
# Create combined 'f.pressure' and 'site' variable
pchange.model2c.w$fp.site <- paste(pchange.model2c.w$f.pressure, pchange.model2c.w$Site, sep = ".")
pchange.model2s.w$fp.site <- paste(pchange.model2s.w$f.pressure, pchange.model2s.w$Site, sep = ".")
# Create new data frame
pchange.lh <- pchange.model2c.w
pchange.lh$st.pc <- pchange.model2s.w$percent.change[match(pchange.lh$fp.site, pchange.model2s.w$fp.site)]
pchange.lh <- pchange.lh[,-5]
names(pchange.lh) <- c("f.pressure", "Site", "local_dist_z", "Comp.pc", "Stress.pc")
pchange.lh.l <- melt(pchange.lh, value.name = "percentchange", id.vars = c("f.pressure", "Site", "local_dist_z"))
## Test to see if percent change for competitive and stress-tolerant corals is significantly different
t.test(percentchange ~ variable, pchange.lh.l)
library(dplyr)
library(arm)
library(glmmTMB)
library(MuMIn)
library(performance)
library(DHARMa)
library(here)
library(Rmisc)
library(reshape2)
library(emmeans)
## Load the data
load(file = "../data/KI_CoralCoverData.RData")
load(file = "../data/KI_CoralCoverData_LH.RData")
## Clean the data
source("../analyses/KI_coral_cover_clean_supp.R")
model1a <- glmmTMB(p.cover.beta ~ local_dist_z + poly(npp_max_z, 2) + mmm_temp_z + exposure,
data = p.cover.b.13, family = beta_family(link = "logit"))
summary(model1a)
# Assess model performance
model_performance(model1a)
check_model(model1a, check = c("pp_check", "vif"))
# Calculate and plot scaled residuals vs. fitted values
model1a.resid <- simulateResiduals(fittedModel = model1a)
plot(model1a.resid)
# Plot residuals against predictor variables
plotResiduals(model1a.resid, p.cover.b.13$local_dist_z)
plotResiduals(model1a.resid, p.cover.b.13$npp_max_z)
plotResiduals(model1a.resid, p.cover.b.13$mmm_temp_z)
plotResiduals(model1a.resid, p.cover.b.13$exposure)
model1b <- glmmTMB(p.cover.beta ~ local_dist_z + poly(npp_max_z, 2) + mmm_temp_z + exposure + (1|Site) + (1|Field.Season),
data = p.cover.b, family = beta_family(link = "logit"))
summary(model1b)
# Assess model performance
model_performance(model1b)
check_model(model1b, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model1b.resid <- simulateResiduals(fittedModel = model1b)
plot(model1b.resid)
# Plot residuals against predictor variables
plotResiduals(model1b.resid, p.cover.b$local_dist_z)
plotResiduals(model1b.resid, p.cover.b$npp_max_z)
plotResiduals(model1b.resid, p.cover.b$mmm_temp_z)
plotResiduals(model1b.resid, p.cover.b$exposure)
model2a <- glmmTMB(p.cover.beta ~ Heat * local_dist_z + dhw_max_z + poly(npp_max_z, 2) + (1|Site),
data = p.cover.ba.1317, family = beta_family(link = "logit"))
summary(model2a)
# Assess model performance
model_performance(model2a)
check_model(model2a, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2a.resid <- simulateResiduals(fittedModel = model2a)
plot(model2a.resid)
# Plot residuals against predictor values
plotResiduals(model2a.resid, p.cover.ba.1317$Heat)
plotResiduals(model2a.resid, p.cover.ba.1317$local_dist_z)
plotResiduals(model2a.resid, p.cover.ba.1317$dhw_max_z)
plotResiduals(model2a.resid, p.cover.ba.1317$npp_max_z)
model2b <- glmmTMB(p.cover.beta ~ Heat * local_dist_z + dhw_max_z + poly(npp_max_z, 2) + (1|Site) + (1|Field.Season),
data = p.cover.ba, family = beta_family(link = "logit"))
summary(model2b)
# Assess model performance
model_performance(model2b)
check_model(model2b, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2b.resid <- simulateResiduals(fittedModel = model2b)
plot(model2b.resid)
# Plot residuals against predictor values
plotResiduals(model2b.resid, p.cover.ba$Heat)
plotResiduals(model2b.resid, p.cover.ba$local_dist_z)
plotResiduals(model2b.resid, p.cover.ba$dhw_max_z)
plotResiduals(model2b.resid, p.cover.ba$npp_max_z)
model2ca <- glmmTMB(p.cover.beta ~ Heat * local_dist_z + poly(dhw_max_z, 2) + npp_max_z + (1|Site),
data = p.cover.comp.1317, ziformula = ~Heat, family = beta_family(link = "logit"))
summary(model2ca)
# Assess model performance
model_performance(model2ca)
check_model(model2ca, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2ca.resid <- simulateResiduals(fittedModel = model2ca)
plot(model2ca.resid)
# Plot residuals against predictor values
plotResiduals(model2ca.resid, p.cover.comp.1317$Heat)
plotResiduals(model2ca.resid, p.cover.comp.1317$local_dist_z)
plotResiduals(model2ca.resid, p.cover.comp.1317$dhw_max_z)
plotResiduals(model2ca.resid, p.cover.comp.1317$npp_max_z)
model2cb <- glmmTMB(p.cover.beta ~ Heat * local_dist_z + poly(dhw_max_z, 2) + npp_max_z + (1|Site),
data = p.cover.comp, ziformula = ~Heat, family = beta_family(link = "logit"))
summary(model2cb)
# Assess model performance
model_performance(model2cb)
check_model(model2cb, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2cb.resid <- simulateResiduals(fittedModel = model2cb)
plot(model2cb.resid)
# Plot residuals against predictor values
plotResiduals(model2cb.resid, p.cover.comp$Heat)
plotResiduals(model2cb.resid, p.cover.comp$local_dist_z)
plotResiduals(model2cb.resid, p.cover.comp$dhw_max_z)
plotResiduals(model2cb.resid, p.cover.comp$npp_max_z)
model2sa <- glmmTMB(p.cover.beta ~ Heat * local_dist_z + dhw_max_z + (1|Site),
data = p.cover.st.1317, family = beta_family(link = "logit"))
summary(model2sa)
# Assess model performance
model_performance(model2sa)
check_model(model2sa, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2sa.resid <- simulateResiduals(fittedModel = model2sa)
plot(model2sa.resid)
# Plot residuals against predictor values
plotResiduals(model2sa.resid, p.cover.st.1317$Heat)
plotResiduals(model2sa.resid, p.cover.st.1317$local_dist_z)
plotResiduals(model2sa.resid, p.cover.st.1317$dhw_max_z)
model2sb <- glmmTMB(p.cover.beta ~ Heat * local_dist_z + dhw_max_z + (1|Site) + (1|Field.Season),
data = p.cover.st, family = beta_family(link = "logit"))
summary(model2sb)
# Assess model performance
model_performance(model2sb)
check_model(model2sb, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model2sb.resid <- simulateResiduals(fittedModel = model2sb)
plot(model2sb.resid)
# Plot residuals against predictor values
plotResiduals(model2sb.resid, p.cover.st$Heat)
plotResiduals(model2sb.resid, p.cover.st$local_dist_z)
plotResiduals(model2sb.resid, p.cover.st$dhw_max_z)
model3a <- glmmTMB(p.cover.beta ~ Heat * life.hist + dhw_max_z + poly(npp_max_z, 2) + (1|Site),
data = p.cover.ba.1317, family = beta_family(link = "logit"))
summary(model3a)
# Assess model performance
model_performance(model3a)
check_model(model3a, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model3a.resid <- simulateResiduals(fittedModel = model3a)
plot(model3a.resid)
# Plot residuals against predictor values
plotResiduals(model3a.resid, p.cover.ba.1317$Heat)
plotResiduals(model3a.resid, p.cover.ba.1317$life.hist)
plotResiduals(model3a.resid, p.cover.ba.1317$dhw_max_z)
plotResiduals(model3a.resid, p.cover.ba.1317$npp_max_z)
model3b <- glmmTMB(p.cover.beta ~ Heat * life.hist + dhw_max_z + poly(npp_max_z, 2) + (1|Site) + (1|Field.Season),
data = p.cover.ba, family = beta_family(link = "logit"))
summary(model3b)
# Assess model performance
model_performance(model3b)
check_model(model3b, check = c("pp_check", "vif", "reqq"))
# Calculate and plot scaled residuals vs. fitted values
model3b.resid <- simulateResiduals(fittedModel = model3b)
plot(model3b.resid)
# Plot residuals against predictor values
plotResiduals(model3b.resid, p.cover.ba$Heat)
plotResiduals(model3b.resid, p.cover.ba$life.hist)
plotResiduals(model3b.resid, p.cover.ba$dhw_max_z)
plotResiduals(model3b.resid, p.cover.ba$npp_max_z)
